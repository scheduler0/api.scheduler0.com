{
  "openapi": "3.0.2",
  "info": {
    "title": "Scheduler0",
    "version": "1",
    "description": "REST API documentation for the Scheduler0 http server\n\n## Authentication Methods\n\n### 1. API Key + Secret Authentication (Default)\nMost endpoints require API Key and Secret authentication:\n- `X-API-Key`: Your API key\n- `X-Secret-Key`: Your API secret\n- `X-Account-ID`: Your account ID (required for most endpoints)\n\n### 2. Basic Authentication (Peer Communication)\nPeer-to-peer communication uses Basic Authentication:\n- Username and password from scheduler0 configuration\n- `X-Peer` header with value 'cmd' or 'peer'\n\n### 3. No Authentication\n- `/api/v1/healthcheck` - Health check endpoint\n\n## Account ID Requirements\n\nThe following endpoints require the `X-Account-ID` header:\n- `/api/v1/jobs/*`\n- `/api/v1/projects/*`\n- `/api/v1/credentials/*`\n- `/api/v1/executors/*`\n- `/api/v1/async-tasks/*`\n- `/api/v1/executions`\n\nAccount endpoints (`/api/v1/accounts/*`) and features (`/api/v1/features`) do not require account ID.",
    "contact": {
      "name": "Support",
      "email": "support@scheduler0.com"
    }
  },
  "tags": [
    {
      "name": "Accounts",
      "description": "Accounts are the main entities that own projects, jobs, and other resources"
    },
    {
      "name": "Credentials",
      "description": "Credentials are used to authenticate client applications / sdk that want to access scheduler0 api"
    },
    {
      "name": "Jobs",
      "description": "Jobs are the scheduled tasks that are executed by scheduler0"
    },
    {
      "name": "Executions",
      "description": "Executions are job execution logs"
    },
    {
      "name": "Projects",
      "description": "Projects are a collections of jobs"
    },
    {
      "name": "Executors",
      "description": "Executors are the different types of executors that can be used to execute jobs"
    },
    {
      "name": "Features",
      "description": "Features are capabilities that can be enabled for accounts"
    },
    {
      "name": "AsyncTasks",
      "description": "AsyncTasks are tasks that are executed asynchronously"
    }
  ],
  "paths": {
    "/api/v1/credentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "Get all credentials",
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to order results by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["date_created", "date_modified", "created_by", "modified_by", "deleted_by"]
            }
          },
          {
            "name": "orderByDirection",
            "in": "query",
            "description": "Direction to order results by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "description": "Credentials required for client applications / sdk that want to access scheduler0 api",
        "operationId": "Credentials.get",
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully returned credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCredentialsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Credentials"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "summary": "Create a new credential",
        "operationId": "Credentials.post",
        "requestBody": {
          "description": "request body to create a new credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "201": {
            "description": "successfully created a credential",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/credentials/:id": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Get one credential",
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "description": "Credentials required for client applications / sdk that want to access scheduler0 api",
        "operationId": "Credentials.getOne",
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully returned a single credential",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Credentials"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "update an existing credential",
        "operationId": "Credentials.put",
        "requestBody": {
          "description": "request body to update a credential",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully updated credential",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Credentials"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "summary": "Delete one credential",
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "description": "Credentials required for client applications / sdk that want to access scheduler0 api",
        "operationId": "Credentials.delete",
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "204": {
            "description": "successfully deleted a single credential"
          }
        }
      }
    },
    "/api/v1/accounts": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "Create a new account",
        "operationId": "Accounts.post",
        "requestBody": {
          "description": "request body to create a new account",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "201": {
            "description": "successfully created an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "Get one account",
        "operationId": "Accounts.getOne",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "description": "Get account details including features",
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully returned account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{id}/feature": {
      "put": {
        "tags": [
          "Accounts"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "Add feature to account",
        "operationId": "Accounts.addFeature",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "request body to add feature to account",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "201": {
            "description": "successfully added feature to account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureRequestResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "Remove feature from account",
        "operationId": "Accounts.removeFeature",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "request body to remove feature from account",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "204": {
            "description": "successfully removed feature from account"
          }
        }
      }
    },
    "/api/v1/features": {
      "get": {
        "tags": [
          "Features"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "Get all available features",
        "operationId": "Features.get",
        "description": "Returns a list of all available features in the system",
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully returned features",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeaturesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/executions": {
      "get": {
        "tags": [
          "Executions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date for filtering execution logs (RFC3339 format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for filtering execution logs (RFC3339 format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Filter by project ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Filter by job ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "Get job execution logs",
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "description": "Returns execution logs for jobs within a specified date range. Requires startDate and endDate parameters in RFC3339 format. Optionally filter by projectId and jobId.",
        "operationId": "Executions.get",
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "a collection of all the stats for jobs executed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedExecutionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/executors": {
      "get": {
        "tags": [
          "Executors"
        ],
        "summary": "List job executors",
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to order results by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["date_created", "date_modified", "created_by", "modified_by", "deleted_by"],
              "default": "date_created"
            }
          },
          {
            "name": "orderByDirection",
            "in": "query",
            "description": "Direction to order results by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "description": "Returns a paginated list of job executors for the account. Supports ordering by various fields and filtering.",
        "operationId": "Executors.get",
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully returned job executors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedExecutorsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Executors"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "Create a new executor",
        "operationId": "Executors.post",
        "requestBody": {
          "description": "request body to create an executor",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutorCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "description": "Unprocessable Entity - Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "successfully created a single executor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/executors/:id": {
      "get": {
        "tags": [
          "Executors"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "Get a single executor",
        "operationId": "Executors.getOne",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully returned a single executor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Executors"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Update a single executor",
        "operationId": "Executor.put",
        "requestBody": {
          "description": "request body to update a executor",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutorUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "description": "Unprocessable Entity - Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "successfully updated a single executor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Executors"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Delete an executor",
        "operationId": "Executors.delete",
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "204": {
            "description": "successfully deleted a single executor"
          }
        }
      }
    },
    "/api/v1/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "Get all projects but in a paginated style",
        "operationId": "Projects.get",
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully returned a new project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "Create a new project",
        "operationId": "Projects.post",
        "requestBody": {
          "description": "request body to create a project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "201": {
            "description": "successfully created a single project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/:id": {
      "get": {
        "tags": [
          "Projects"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "summary": "Get a single project",
        "operationId": "Projects.getOne",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully returned a single project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Update a single project",
        "operationId": "Projects.put",
        "requestBody": {
          "description": "request body to update a project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully updated a single project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Delete a single project",
        "operationId": "Projects.delete",
        "requestBody": {
          "description": "request body to delete a project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDeleteRequestBody"
              }
            }
          }
        },
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "204": {
            "description": "successfully deleted a single project and all its jobs"
          }
        }
      }
    },
    "/api/v1/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project to list jobs for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get all jobs but in a paginated style",
        "operationId": "Jobs.get",
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully paginated projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedJobsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Jobs"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [],
        "summary": "Create a new scheduled job for a project",
        "operationId": "Jobs.post",
        "requestBody": {
          "description": "request body to create a job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully created a job",
            "headers": {
              "Location": {
                "description": "URL to check the status of the async task",
                "schema": {
                  "type": "string",
                  "pattern": "^/async-tasks/[a-zA-Z0-9-]+$"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/:id": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Returns a single job",
        "operationId": "Jobs.getOne",
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully return a single job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Jobs"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Updated a single job",
        "operationId": "Jobs.update",
        "requestBody": {
          "description": "request body to update a job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully updated a project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Jobs"
        ],
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Deleted a single job",
        "operationId": "Jobs.delete",
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "204": {
            "description": "successfully deleted a project"
          }
        }
      }
    },
    "/api/v1/healthcheck": {
      "get": {
        "summary": "Healthcheck Endpoint",
        "description": "Returns current leader and raft stats. No authentication required.",
        "responses": {
          "200": {
            "description": "Healthcheck data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Data related to the current Raft cluster state.",
                      "properties": {
                        "leaderAddress": {
                          "type": "string",
                          "description": "Address of the current Raft leader.",
                          "example": ""
                        },
                        "leaderId": {
                          "type": "string",
                          "description": "ID of the current Raft leader.",
                          "example": "1"
                        },
                        "raftStats": {
                          "type": "object",
                          "description": "Detailed statistics about the Raft state machine.",
                          "properties": {
                            "applied_index": {
                              "type": "string",
                              "description": "Index of the last log entry applied to the state machine.",
                              "example": "162"
                            },
                            "commit_index": {
                              "type": "string",
                              "description": "Index of the highest log entry known to be committed.",
                              "example": "162"
                            },
                            "fsm_pending": {
                              "type": "string",
                              "description": "Number of log entries pending application to the FSM.",
                              "example": "0"
                            },
                            "last_contact": {
                              "type": "string",
                              "description": "Time since last contact with leader, in milliseconds.",
                              "example": "0"
                            },
                            "last_log_index": {
                              "type": "string",
                              "description": "Index of the last log entry stored.",
                              "example": "162"
                            },
                            "last_log_term": {
                              "type": "string",
                              "description": "Term of the last log entry stored.",
                              "example": "7"
                            },
                            "last_snapshot_index": {
                              "type": "string",
                              "description": "Index of the last snapshot taken.",
                              "example": "55"
                            },
                            "last_snapshot_term": {
                              "type": "string",
                              "description": "Term of the last snapshot taken.",
                              "example": "5"
                            },
                            "latest_configuration": {
                              "type": "string",
                              "description": "The most recent cluster configuration.",
                              "example": "[{Suffrage:Voter ID:1 Address:127.0.0.1:7070}]"
                            },
                            "latest_configuration_index": {
                              "type": "string",
                              "description": "Index at which the latest configuration was committed.",
                              "example": "0"
                            },
                            "num_peers": {
                              "type": "string",
                              "description": "Number of peers in the Raft cluster.",
                              "example": "0"
                            },
                            "protocol_version": {
                              "type": "string",
                              "description": "Current protocol version used.",
                              "example": "3"
                            },
                            "protocol_version_max": {
                              "type": "string",
                              "description": "Maximum supported protocol version.",
                              "example": "3"
                            },
                            "protocol_version_min": {
                              "type": "string",
                              "description": "Minimum supported protocol version.",
                              "example": "0"
                            },
                            "snapshot_version_max": {
                              "type": "string",
                              "description": "Maximum supported snapshot version.",
                              "example": "1"
                            },
                            "snapshot_version_min": {
                              "type": "string",
                              "description": "Minimum supported snapshot version.",
                              "example": "0"
                            },
                            "state": {
                              "type": "string",
                              "description": "Current Raft node state (e.g., Leader, Follower).",
                              "example": "Leader"
                            },
                            "term": {
                              "type": "string",
                              "description": "Current term of the Raft node.",
                              "example": "7"
                            }
                          }
                        }
                      }
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the healthcheck was successful.",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/async-tasks/{id}": {
      "get": {
        "tags": [
          "AsyncTasks"
        ],
        "summary": "Get a single async task",
        "description": "Retrieves an async task by request ID. If the task is not completed, this endpoint will block until the task finishes or the request times out. Returns the task immediately if already completed.",
        "security": [{
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        }],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Request ID of the async task",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "200": {
            "description": "successfully returned async task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncTaskResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "id": {
        "name": "id",
        "schema":{
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "accountId": {
        "name": "x-account-id",
        "in": "header",
        "description": "The account ID for the request",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of items to return",
        "required": true,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 10
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Number of items to skip",
        "required": true,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      },
      "ApiSecretAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-secret-key"
      },
      "BasicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "Basic authentication for peer-to-peer communication"
      }
    },
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the account"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountFeature"
            },
            "description": "List of features enabled for this account"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the account was created"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the account was last modified"
          }
        },
        "required": ["id", "name", "features", "dateCreated"]
      },
      "AccountCreateRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the account to create"
          }
        },
        "required": ["name"]
      },
      "AccountResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Account"
          }
        }
      },
      "AccountFeature": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the account"
          },
          "featureId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the feature"
          },
          "feature": {
            "type": "string",
            "description": "Name of the feature"
          }
        },
        "required": ["accountId", "featureId", "feature"]
      },
      "Feature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the feature"
          },
          "name": {
            "type": "string",
            "description": "Name of the feature"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the feature was created"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the feature was last modified"
          }
        },
        "required": ["id", "name", "dateCreated"]
      },
      "FeatureRequest": {
        "type": "object",
        "properties": {
          "featureId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the feature to add or remove"
          }
        },
        "required": ["featureId"]
      },
      "FeatureRequestResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/FeatureRequest"
          }
        }
      },
      "FeaturesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          }
        }
      },
      "Credential": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "accountId": {
            "type": "string",
            "description": "this is the account id"
          },
          "archived": {
            "type": "boolean"
          },
          "apiKey": {
            "type": "string",
            "description": "this key is created by the server"
          },
          "apiSecret": {
            "type": "string",
            "description": "this secret is created by the server"
          },
          "dateCreated": {
            "type": "string"
          },
          "dateModified": {
            "type": "string"
          },
          "dateDeleted": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "modifiedBy": {
            "type": "string"
          },
          "deletedBy": {
            "type": "string"
          }
        }
      },
      "CredentialCreateRequestBody": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          }
        }
      },
      "CredentialUpdateRequestBody": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          }
        }
      },
      "CredentialResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/Credential"
          }
        }
      },
      "Execution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the execution log"
          },
          "accountId": {
            "type": "string"
          },
          "uniqueId": {
            "type": "string",
            "description": "unique id of the execution logs"
          },
          "state": {
            "type": "string",
            "description": "job execution state (success, failed, scheduled)"
          },
          "nodeId": {
            "type": "string",
            "description": "the id of the node that the job was queued on to execute the job"
          },
          "jobId": {
            "type": "string",
            "description": "the id of the job that was executed"
          },
          "lastExecutionDatetime": {
            "type": "string",
            "description": "last date and time in which the job got executed"
          },
          "nextExecutionDatetime": {
            "type": "string",
            "description": "next date and time in which the job will be executed"
          },
          "jobQueueVersion": {
            "type": "number",
            "description": "the version of the job queue that was executed"
          },
          "executionVersion": {
            "type": "number",
            "description": "URL of the cloud resource"
          },
          "logs": {
            "type": "string",
            "description": "logs from execution of the job"
          },
          "date_created": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ExecutionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/Execution"
          }
        }
      },
      "Executor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "id of the executor"
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the account that owns this executor"
          },
          "name": {
            "type": "string",
            "description": "name of the executor"
          },
          "type": {
            "type": "string",
            "description": "type of the executor (cloud_function, container, webhook_url)",
            "enum": [
              "cloud_function",
              "container",
              "webhook_url"
            ]
          },
          "region": {
            "type": "string",
            "description": "the cloud region in which the executor is located"
          },
          "cloudProvider": {
            "type": "string",
            "description": "the cloud provider in which the executor is located"
          },
          "cloudResourceUrl": {
            "type": "string",
            "description": "URL of the cloud resource"
          },
          "cloudApiKey": {
            "type": "string",
            "description": "API key for cloud provider authentication"
          },
          "cloudApiSecret": {
            "type": "string",
            "description": "API secret for cloud provider authentication"
          },
          "webhookUrl": {
            "type": "string",
            "description": "URL for webhook execution"
          },
          "webhookSecret": {
            "type": "string",
            "description": "Secret for webhook authentication"
          },
          "webhookMethod": {
            "type": "string",
            "description": "HTTP method for webhook execution",
            "enum": ["GET", "POST", "PUT", "DELETE"]
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the executor was created"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the executor was last modified"
          },
          "dateDeleted": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the executor was deleted"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the executor"
          },
          "modifiedBy": {
            "type": "string",
            "description": "User who last modified the executor"
          },
          "deletedBy": {
            "type": "string",
            "description": "User who deleted the executor"
          }
        },
        "additionalProperties": false
      },
      "ExecutorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/Executor"
          }
        }
      },
      "ExecutorCreateRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the executor"
          },
          "type": {
            "type": "string",
            "description": "type of the executor (cloud_function, container, webhook_url)",
            "enum": [
              "cloud_function",
              "container",
              "webhook_url"
            ]
          },
          "region": {
            "type": "string",
            "description": "the cloud region in which the executor is located"
          },
          "cloudProvider": {
            "type": "string",
            "description": "the cloud provider in which the executor is located"
          },
          "cloudResourceUrl": {
            "type": "string",
            "description": "URL of the cloud resource"
          },
          "cloudApiKey": {
            "type": "string",
            "description": "API key for cloud provider authentication"
          },
          "cloudApiSecret": {
            "type": "string",
            "description": "API secret for cloud provider authentication"
          },
          "webhookUrl": {
            "type": "string",
            "description": "URL for webhook execution"
          },
          "webhookSecret": {
            "type": "string",
            "description": "Secret for webhook authentication"
          },
          "webhookMethod": {
            "type": "string",
            "description": "HTTP method for webhook execution",
            "enum": ["GET", "POST", "PUT", "DELETE"]
          }
        }
      },
      "ExecutorUpdateRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the executor"
          },
          "type": {
            "type": "string",
            "description": "type of the executor (cloud_function, container, webhook_url)",
            "enum": [
              "cloud_function",
              "container",
              "webhook_url"
            ]
          },
          "region": {
            "type": "string",
            "description": "the cloud region in which the executor is located"
          },
          "cloudProvider": {
            "type": "string",
            "description": "the cloud provider in which the executor is located"
          },
          "cloudResourceUrl": {
            "type": "string",
            "description": "URL of the cloud resource"
          },
          "cloudApiKey": {
            "type": "string",
            "description": "API key for cloud provider authentication"
          },
          "cloudApiSecret": {
            "type": "string",
            "description": "API secret for cloud provider authentication"
          },
          "webhookUrl": {
            "type": "string",
            "description": "URL for webhook execution"
          },
          "webhookSecret": {
            "type": "string",
            "description": "Secret for webhook authentication"
          },
          "webhookMethod": {
            "type": "string",
            "description": "HTTP method for webhook execution",
            "enum": ["GET", "POST", "PUT", "DELETE"]
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the job"
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the account that owns this job"
          },
          "projectId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the project this job belongs to"
          },
          "executorId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the job executor"
          },
          "data": {
            "type": "string",
            "description": "Payload data for the job executor"
          },
          "spec": {
            "type": "string",
            "description": "Cron specification for job scheduling (e.g., '0 30 * * * *', '@hourly', '@every 1h30m10s')"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date for the job execution"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date for the job execution"
          },
          "lastExecutionDate": {
            "type": "string",
            "format": "date-time",
            "description": "Last date when the job was executed"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone for the job (e.g., 'UTC', 'America/New_York')"
          },
          "timezoneOffset": {
            "type": "integer",
            "format": "int64",
            "description": "Timezone offset in seconds"
          },
          "retryMax": {
            "type": "integer",
            "description": "Maximum number of retries for failed executions"
          },
          "executionId": {
            "type": "string",
            "description": "Unique execution ID for this job run"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive"],
            "description": "Current status of the job"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the job was created"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the job was last modified"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the job"
          },
          "modifiedBy": {
            "type": "string",
            "description": "User who last modified the job"
          },
          "deletedBy": {
            "type": "string",
            "description": "User who deleted the job"
          }
        }
      },
      "JobCreateRequestBody": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["projectId", "timezone"],
          "properties": {
            "projectId": {
              "type": "integer",
              "format": "int64",
              "description": "ID of the project this job belongs to"
            },
            "timezone": {
              "type": "string",
              "description": "Timezone for the job (e.g., 'UTC', 'America/New_York')"
            },
            "executorId": {
              "type": "integer",
              "format": "int64",
              "description": "ID of the job executor"
            },
            "data": {
              "type": "string",
              "description": "Payload data for the job executor"
            },
            "spec": {
              "type": "string",
              "description": "Cron specification for job scheduling (e.g., '0 30 * * * *', '@hourly', '@every 1h30m10s')"
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "Start date for the job execution"
            },
            "endDate": {
              "type": "string",
              "format": "date-time",
              "description": "End date for the job execution"
            },
            "timezoneOffset": {
              "type": "integer",
              "format": "int64",
              "description": "Timezone offset in seconds"
            },
            "retryMax": {
              "type": "integer",
              "description": "Maximum number of retries for failed executions"
            },
            "status": {
              "type": "string",
              "enum": ["active", "inactive"],
              "description": "Current status of the job"
            }
          }
        }
      },
      "JobUpdateRequestBody": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the project this job belongs to"
          },
          "executorId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the job executor"
          },
          "data": {
            "type": "string",
            "description": "Payload data for the job executor"
          },
          "spec": {
            "type": "string",
            "description": "Cron specification for job scheduling (e.g., '0 30 * * * *', '@hourly', '@every 1h30m10s')"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date for the job execution"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date for the job execution"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone for the job (e.g., 'UTC', 'America/New_York')"
          },
          "timezoneOffset": {
            "type": "integer",
            "format": "int64",
            "description": "Timezone offset in seconds"
          },
          "retryMax": {
            "type": "integer",
            "description": "Maximum number of retries for failed executions"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive"],
            "description": "Current status of the job"
          }
        }
      },
      "JobResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/Job"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProjectCreateRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ProjectUpdateRequestBody": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        }
      },
      "ProjectDeleteRequestBody": {
        "type": "object",
        "required": ["deletedBy"],
        "properties": {
          "deletedBy": {
            "type": "string",
            "description": "The ID of the user who is deleting the project (e.g., Clerk user ID)"
          }
        }
      },
      "ProjectResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/Project"
          }
        }
      },
      "PaginatedCredentialsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "offset": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "credentials": {
                "type": "array",
                "items": {
                  "type": "object",
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          }
        }
      },
      "PaginatedExecutionsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "offset": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "executions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "$ref": "#/components/schemas/Execution"
                }
              }
            }
          }
        }
      },
      "PaginatedExecutorsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "offset": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "executors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "$ref": "#/components/schemas/Executor"
                }
              }
            }
          }
        }
      },
      "PaginatedJobsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "offset": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "jobs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        }
      },
      "PaginatedProjectsResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/Project"
            }
          }
        }
      },
      "AsyncTaskState": {
        "type": "integer",
        "enum": [0, 1, 2, 3],
        "description": "State of the async task (0: Not Started, 1: In Progress, 2: Success, 3: Fail)"
      },
      "AsyncTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64"
          },
          "requestId": {
            "type": "string"
          },
          "input": {
            "type": "string"
          },
          "output": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/AsyncTaskState"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AsyncTaskResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/AsyncTask"
          }
        }
      },
      "PaginatedAsyncTasksResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "offset": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "asyncTasks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AsyncTask"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "the client is forbidden to access resource",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "the client is not authorized to access resource",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "the client request parameters or body is malformed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  }
}